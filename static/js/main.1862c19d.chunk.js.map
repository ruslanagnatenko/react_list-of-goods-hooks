{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortBy","goodsFromServer","App","useState","ByDefault","sortField","setSortField","reverse","setReverse","visibleGoods","goods","preparedGoods","sort","good1","good2","ByAlphabet","localeCompare","ByLength","length","getPreparedGoods","className","type","cn","onClick","map","visibleGood","ReactDOM","render","document","getElementById"],"mappings":"6KAwBKA,E,0EAlBQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAQGD,K,aAAAA,E,iBAAAA,E,mBAAAA,M,KA+BE,IAAME,EAAM,WACjB,MAAkCC,mBAAiBH,EAAOI,WAA1D,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BH,oBAAS,GAAvC,mBAAOI,EAAP,KAAgBC,EAAhB,KACMC,EA5BR,SAA0BC,EAA1B,GAA6E,IAAhCL,EAA+B,EAA/BA,UAAWE,EAAoB,EAApBA,QAClDI,EAAa,YAAOD,GAqBxB,OAnBIL,IACFM,EAAgBA,EAAcC,MAAK,SAACC,EAAOC,GACzC,OAAQT,GACN,KAAKL,EAAOe,WACV,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAAOiB,SACV,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,OAKXX,GACFI,EAAcJ,UAGTI,EAMcQ,CAAiBlB,EAAiB,CACrDI,YACAE,YAQF,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,WAAYjB,IAAcL,EAAOe,aAErCQ,QAAS,kBAAMjB,EAAaN,EAAOe,aAPrC,iCAYA,wBACEM,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,WAAYjB,IAAcL,EAAOiB,WAErCM,QAAS,kBAAMjB,EAAaN,EAAOiB,WAPrC,4BAYA,wBACEI,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,YAAaf,IAEjBgB,QAAS,kBAAMf,GAAYD,IAP7B,sBAYEF,GAAaE,IACb,wBACEc,KAAK,SACLD,UAAU,4BACVG,QAhDI,WACZjB,EAAaN,EAAOI,WACpBI,GAAW,IA2CL,sBAUJ,6BACGC,EAAae,KACZ,SAAAC,GAAW,OACT,oBACE,UAAQ,OADV,SAIGA,GAFIA,YCxHnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.1862c19d.chunk.js","sourcesContent":["import { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\n\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ninterface Filters {\n  sortField: string | '';\n  reverse: boolean;\n}\n\nenum SortBy {\n  ByDefault = '',\n  ByAlphabet = 'abc',\n  ByLength = 'length',\n}\n\nfunction getPreparedGoods(goods: string[], { sortField, reverse }: Filters) {\n  let preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods = preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortBy.ByAlphabet:\n          return good1.localeCompare(good2);\n\n        case SortBy.ByLength:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverse) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState<SortBy>(SortBy.ByDefault);\n  const [reverse, setReverse] = useState(false);\n  const visibleGoods = getPreparedGoods(goodsFromServer, {\n    sortField,\n    reverse,\n  });\n\n  const reset = () => {\n    setSortField(SortBy.ByDefault);\n    setReverse(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-info',\n            { 'is-light': sortField !== SortBy.ByAlphabet },\n          )}\n          onClick={() => setSortField(SortBy.ByAlphabet)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-success',\n            { 'is-light': sortField !== SortBy.ByLength },\n          )}\n          onClick={() => setSortField(SortBy.ByLength)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-warning',\n            { 'is-light': !reverse },\n          )}\n          onClick={() => setReverse(!reverse)}\n        >\n          Reverse\n        </button>\n\n        {(sortField || reverse) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(\n          visibleGood => (\n            <li\n              data-cy=\"Good\"\n              key={visibleGood}\n            >\n              {visibleGood}\n            </li>\n          ),\n        )}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}